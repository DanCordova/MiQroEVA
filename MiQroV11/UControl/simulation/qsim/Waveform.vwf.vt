// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/14/2022 19:54:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          UControl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UControl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] Cache;
reg clk;
reg [15:0] Flags;
reg [7:0] MDR;
reg rst;
// wires                                               
wire [2:0] ALU;
wire [4:0] MBusMux;
wire MuxA;
wire MuxB;
wire MuxC;
wire [3:0] RegEn;
wire [3:0] RegVal;
wire [60:0] UMemOut;

// assign statements (if any)                          
UControl i1 (
// port map - connection between master ports and signals/registers   
	.ALU(ALU),
	.Cache(Cache),
	.clk(clk),
	.Flags(Flags),
	.MBusMux(MBusMux),
	.MDR(MDR),
	.MuxA(MuxA),
	.MuxB(MuxB),
	.MuxC(MuxC),
	.RegEn(RegEn),
	.RegVal(RegVal),
	.rst(rst),
	.UMemOut(UMemOut)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// Cache[ 15 ]
initial
begin
	Cache[15] = 1'b0;
end 
// Cache[ 14 ]
initial
begin
	Cache[14] = 1'b0;
end 
// Cache[ 13 ]
initial
begin
	Cache[13] = 1'b0;
end 
// Cache[ 12 ]
initial
begin
	Cache[12] = 1'b0;
end 
// Cache[ 11 ]
initial
begin
	Cache[11] = 1'b0;
end 
// Cache[ 10 ]
initial
begin
	Cache[10] = 1'b0;
end 
// Cache[ 9 ]
initial
begin
	Cache[9] = 1'b0;
end 
// Cache[ 8 ]
initial
begin
	Cache[8] = 1'b0;
end 
// Cache[ 7 ]
initial
begin
	Cache[7] = 1'b0;
end 
// Cache[ 6 ]
initial
begin
	Cache[6] = 1'b0;
end 
// Cache[ 5 ]
initial
begin
	Cache[5] = 1'b0;
end 
// Cache[ 4 ]
initial
begin
	Cache[4] = 1'b0;
end 
// Cache[ 3 ]
initial
begin
	Cache[3] = 1'b0;
end 
// Cache[ 2 ]
initial
begin
	Cache[2] = 1'b0;
end 
// Cache[ 1 ]
initial
begin
	Cache[1] = 1'b0;
end 
// Cache[ 0 ]
initial
begin
	Cache[0] = 1'b0;
end 
// Flags[ 15 ]
initial
begin
	Flags[15] = 1'b0;
end 
// Flags[ 14 ]
initial
begin
	Flags[14] = 1'b0;
end 
// Flags[ 13 ]
initial
begin
	Flags[13] = 1'b0;
end 
// Flags[ 12 ]
initial
begin
	Flags[12] = 1'b0;
end 
// Flags[ 11 ]
initial
begin
	Flags[11] = 1'b0;
end 
// Flags[ 10 ]
initial
begin
	Flags[10] = 1'b0;
end 
// Flags[ 9 ]
initial
begin
	Flags[9] = 1'b0;
end 
// Flags[ 8 ]
initial
begin
	Flags[8] = 1'b0;
end 
// Flags[ 7 ]
initial
begin
	Flags[7] = 1'b0;
end 
// Flags[ 6 ]
initial
begin
	Flags[6] = 1'b0;
end 
// Flags[ 5 ]
initial
begin
	Flags[5] = 1'b0;
end 
// Flags[ 4 ]
initial
begin
	Flags[4] = 1'b0;
end 
// Flags[ 3 ]
initial
begin
	Flags[3] = 1'b0;
end 
// Flags[ 2 ]
initial
begin
	Flags[2] = 1'b0;
end 
// Flags[ 1 ]
initial
begin
	Flags[1] = 1'b0;
end 
// Flags[ 0 ]
initial
begin
	Flags[0] = 1'b0;
end 
// MDR[ 7 ]
initial
begin
	MDR[7] = 1'b0;
end 
// MDR[ 6 ]
initial
begin
	MDR[6] = 1'b0;
end 
// MDR[ 5 ]
initial
begin
	MDR[5] = 1'b0;
end 
// MDR[ 4 ]
initial
begin
	MDR[4] = 1'b0;
end 
// MDR[ 3 ]
initial
begin
	MDR[3] = 1'b0;
end 
// MDR[ 2 ]
initial
begin
	MDR[2] = 1'b0;
end 
// MDR[ 1 ]
initial
begin
	MDR[1] = 1'b0;
end 
// MDR[ 0 ]
initial
begin
	MDR[0] = 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 
endmodule

